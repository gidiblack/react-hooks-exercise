{"ast":null,"code":"import { useReducer, useState } from 'react';\nimport useInterval from './useInterval'; // custom hook to hold 4 react hook calls\n\nconst useEmailValidation = maxSeconds => {\n  // regex to validate email\n  const validateEmail = email => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }; // email valid useState hook\n\n\n  const {\n    0: emailValid,\n    1: setEmailValid\n  } = useState(false); // reducer to set state if email is valid or not\n\n  const emailReducer = (state, action) => {\n    const isValidEmail = validateEmail(action);\n    setEmailValid(isValidEmail);\n    return action;\n  }; // useReducer hook call\n\n\n  const {\n    0: email,\n    1: setEmail\n  } = useReducer(emailReducer, '');\n  const {\n    0: count,\n    1: setCount\n  } = useState(maxSeconds); // custom setInterval method by react team to setCount\n\n  useInterval(() => {\n    setCount(count - 1);\n  }, count > 0 ? 1000 : null); // return the values of the hook calls made inside this custom functional hook \n\n  return {\n    count,\n    email,\n    setEmail,\n    emailValid\n  };\n};\n\nexport default useEmailValidation;","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/useEmailValidation.js"],"names":["useReducer","useState","useInterval","useEmailValidation","maxSeconds","validateEmail","email","re","test","emailValid","setEmailValid","emailReducer","state","action","isValidEmail","setEmail","count","setCount"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;AACA,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;AACvC;AACA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC7B,UAAMC,EAAE,GAAG,2JAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAP;AACH,GAHD,CAFuC,CAMvC;;;AACA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,CAAC,KAAD,CAA5C,CAPuC,CAQvC;;AACA,QAAMU,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAMC,YAAY,GAAGT,aAAa,CAACQ,MAAD,CAAlC;AACAH,IAAAA,aAAa,CAACI,YAAD,CAAb;AACA,WAAOD,MAAP;AACH,GAJD,CATuC,CAcvC;;;AACA,QAAM;AAAA,OAACP,KAAD;AAAA,OAAQS;AAAR,MAAoBf,UAAU,CAACW,YAAD,EAAe,EAAf,CAApC;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAACG,UAAD,CAAlC,CAhBuC,CAiBvC;;AACAF,EAAAA,WAAW,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,GAFU,EAERA,KAAK,GAAG,CAAR,GAAY,IAAZ,GAAmB,IAFX,CAAX,CAlBuC,CAqBvC;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASV,IAAAA,KAAT;AAAgBS,IAAAA,QAAhB;AAA0BN,IAAAA;AAA1B,GAAP;AACH,CAvBD;;AAyBA,eAAeN,kBAAf","sourcesContent":["import { useReducer, useState } from 'react';\r\nimport useInterval from './useInterval';\r\n// custom hook to hold 4 react hook calls\r\nconst useEmailValidation = (maxSeconds) => {\r\n    // regex to validate email\r\n    const validateEmail = (email) => {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(email);\r\n    };\r\n    // email valid useState hook\r\n    const [emailValid, setEmailValid] = useState(false);\r\n    // reducer to set state if email is valid or not\r\n    const emailReducer = (state, action) => {\r\n        const isValidEmail = validateEmail(action);\r\n        setEmailValid(isValidEmail);\r\n        return action;\r\n    };\r\n    // useReducer hook call\r\n    const [email, setEmail] = useReducer(emailReducer, '');\r\n    const [count, setCount] = useState(maxSeconds);\r\n    // custom setInterval method by react team to setCount\r\n    useInterval(() => {\r\n        setCount(count - 1);\r\n    }, count > 0 ? 1000 : null);\r\n    // return the values of the hook calls made inside this custom functional hook \r\n    return { count, email, setEmail, emailValid };\r\n}\r\n\r\nexport default useEmailValidation;"]},"metadata":{},"sourceType":"module"}