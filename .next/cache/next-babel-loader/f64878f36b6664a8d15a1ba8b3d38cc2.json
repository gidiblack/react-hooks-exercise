{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIDEON\\\\Desktop\\\\Web Projects\\\\React\\\\conference\\\\src\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const imageRef = useRef(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true); // scroll event listener using useEffect hook, that function returns another function to remove the listener before the component unmounts\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler); // call setInView to set the state of the component when it first mounts\n\n    setInView(isInView());\n    setIsLoading(false);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }); // useState hook to track whether the current component is in full view of the browser window\n\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false); //function that returns whether the component is showing in the scrollable area using getBoundingClientRect method\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  }; // function to set the inView state decleared earlier based on whether the current image/component is in view\n\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  }; // return secondaryImg component when it's state == inView and primaryImg component when it's state != inView\n\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAkC;AAC1D,QAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;AAEA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C,CAH0D,CAI1D;;AACAD,EAAAA,SAAS,CAAE,MAAM;AACbQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC,EADa,CAEb;;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAQ,MAAM;AACVC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GARQ,CAAT,CAL0D,CAe1D;;AACA,QAAM;AAAA,OAACI,MAAD;AAAA,OAASH;AAAT,MAAsBV,QAAQ,CAAC,KAAD,CAApC,CAhB0D,CAkB1D;;AACA,QAAMW,QAAQ,GAAG,MAAM;AACnB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AAClB,YAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND,CAnB0D,CA2B1D;;;AACA,QAAMV,aAAa,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAAC,MAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD,CA5B0D,CAiC1D;;;AACA,SAAON,SAAS,GAAG,IAAH,GACZ;AACI,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UADjC;AAC6C,IAAA,GAAG,EAAC,EADjD;AACoD,IAAA,GAAG,EAAEE,QADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAtCD;;AAwCA,eAAeH,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\r\n\r\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\r\n    const imageRef = useRef(null);\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // scroll event listener using useEffect hook, that function returns another function to remove the listener before the component unmounts\r\n    useEffect (() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        // call setInView to set the state of the component when it first mounts\r\n        setInView(isInView());\r\n        setIsLoading(false);\r\n        return (() => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        });\r\n    });\r\n\r\n    // useState hook to track whether the current component is in full view of the browser window\r\n    const [inView, setInView] = useState(false);\r\n\r\n    //function that returns whether the component is showing in the scrollable area using getBoundingClientRect method\r\n    const isInView = () => {\r\n        if (imageRef.current) {\r\n            const rect = imageRef.current.getBoundingClientRect();\r\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // function to set the inView state decleared earlier based on whether the current image/component is in view\r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n    // return secondaryImg component when it's state == inView and primaryImg component when it's state != inView\r\n    return isLoading ? null : (\r\n        <img \r\n            src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />\r\n    );\r\n};\r\n\r\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}