{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIDEON\\\\Desktop\\\\Web Projects\\\\React\\\\conference\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\nconst InputElement = () => {\n  // useState tracks a single JS object or value\n  // js destructuring syntax is used to name the two properties returned by useState -> readonly variable and function that sets the variable  \n  const {\n    0: inputText,\n    1: setInputText\n  } = useState(\"\"); // create a new state value inialised with empty array to hold state history changes\n\n  const {\n    0: historyList,\n    1: setHistoryList\n  } = useState([]); // call function from inside the onChange event listener and parse the current value of input to it.\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }\n  }, __jsx(\"input\", {\n    onChange: e => {\n      setInputText(e.target.value);\n      setHistoryList([...historyList, e.target.value]);\n    },\n    placeholder: \"Enter some text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 41\n    }\n  }), inputText, __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 14\n    }\n  }), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, historyList.map(rec => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 24\n      }\n    }, rec);\n  })));\n};\n\nexport default InputElement;","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/pages/index.js"],"names":["React","useState","InputElement","inputText","setInputText","historyList","setHistoryList","e","target","value","map","rec"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB;AACA;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BH,QAAQ,CAAC,EAAD,CAA1C,CAHuB,CAIvB;;AACA,QAAM;AAAA,OAACI,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C,CALuB,CAMvB;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AACR,IAAA,QAAQ,EAAGM,CAAD,IAAO;AACbH,MAAAA,YAAY,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACAH,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBE,CAAC,CAACC,MAAF,CAASC,KAA1B,CAAD,CAAd;AACH,KAJO;AAKR,IAAA,WAAW,EAAC,iBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,EAK6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAL7B,EAMFN,SANE,EAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARG,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,WAAW,CAACK,GAAZ,CAAiBC,GAAD,IAAS;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,GAAN,CAAP;AACH,GAFA,CADL,CATG,CAAP;AAgBH,CAvBD;;AAyBA,eAAeT,YAAf","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nconst InputElement = () => {\r\n    // useState tracks a single JS object or value\r\n    // js destructuring syntax is used to name the two properties returned by useState -> readonly variable and function that sets the variable  \r\n    const [inputText, setInputText] = useState(\"\");\r\n    // create a new state value inialised with empty array to hold state history changes\r\n    const [historyList, setHistoryList] = useState([]);\r\n    // call function from inside the onChange event listener and parse the current value of input to it.\r\n    return <div><input\r\n        onChange={(e) => {\r\n            setInputText(e.target.value);\r\n            setHistoryList([...historyList, e.target.value]);\r\n        }}\r\n        placeholder=\"Enter some text\" /><br/>\r\n        {inputText}\r\n        {/* MAP through the array and output history on change */}\r\n        <hr/><br/>\r\n        <ul>\r\n            {historyList.map((rec) => {\r\n                return <div>{rec}</div>\r\n            })}\r\n            \r\n        </ul>\r\n        </div>;\r\n};\r\n\r\nexport default InputElement;"]},"metadata":{},"sourceType":"module"}