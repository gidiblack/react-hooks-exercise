{"ast":null,"code":"var _s = $RefreshSig$();\n\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nvar useInterval = function useInterval(callback, delay) {\n  _s();\n\n  var savedCallback = useRef(); // Remember the latest function.\n\n  useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]);\n};\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nexport default useInterval;","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/useInterval.js"],"names":["useEffect","useRef","useInterval","callback","delay","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAWC,KAAX,EAAqB;AAAA;;AACvC,MAAMC,aAAa,GAAGJ,MAAM,EAA5B,CADuC,CAGvC;;AACAD,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJuC,CAQvC;;AACAH,EAAAA,SAAS,CAAC,YAAM;AACd,aAASO,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,KAAP,CAApB;AACA,aAAO;AAAA,eAAMM,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACD;AACF,GARQ,EAQN,CAACJ,KAAD,CARM,CAAT;AASD,CAlBD;;GAAMF,W;;AAmBN,eAAeA,WAAf","sourcesContent":["// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\nexport default useInterval;\n"]},"metadata":{},"sourceType":"module"}