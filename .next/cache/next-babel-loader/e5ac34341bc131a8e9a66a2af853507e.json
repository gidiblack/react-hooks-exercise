{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useState } from 'react';\nimport useInterval from './useInterval'; // custom hook to hold 4 react hook calls\n\nvar useEmailValidation = function useEmailValidation(maxSeconds) {\n  _s();\n\n  // regex to validate email\n  var validateEmail = function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }; // email valid useState hook\n\n\n  var _useState = useState(false),\n      emailValid = _useState[0],\n      setEmailValid = _useState[1]; // reducer to set state if email is valid or not\n\n\n  var emailReducer = function emailReducer(state, action) {\n    var isValidEmail = validateEmail(action);\n    setEmailValid(isValidEmail);\n    return action;\n  }; // useReducer hook call\n\n\n  var _useReducer = useReducer(emailReducer, ''),\n      email = _useReducer[0],\n      setEmail = _useReducer[1];\n\n  var _useState2 = useState(maxSeconds),\n      count = _useState2[0],\n      setCount = _useState2[1]; // custom setInterval method by react team to setCount\n\n\n  useInterval(function () {\n    setCount(count - 1);\n  }, count > 0 ? 1000 : null); // return the values of the hook calls made inside this custom functional hook \n\n  return {\n    count: count,\n    email: email,\n    setEmail: setEmail,\n    emailValid: emailValid\n  };\n};\n\n_s(useEmailValidation, \"Fk/UAhbN+NYeUpW8RgVunOxHsao=\", false, function () {\n  return [useInterval];\n});\n\nexport default useEmailValidation;","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/useEmailValidation.js"],"names":["useReducer","useState","useInterval","useEmailValidation","maxSeconds","validateEmail","email","re","test","emailValid","setEmailValid","emailReducer","state","action","isValidEmail","setEmail","count","setCount"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,UAAD,EAAgB;AAAA;;AACvC;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC7B,QAAMC,EAAE,GAAG,2JAAX;AACA,WAAOA,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAP;AACH,GAHD,CAFuC,CAMvC;;;AANuC,kBAOHL,QAAQ,CAAC,KAAD,CAPL;AAAA,MAOhCQ,UAPgC;AAAA,MAOpBC,aAPoB,iBAQvC;;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACpC,QAAMC,YAAY,GAAGT,aAAa,CAACQ,MAAD,CAAlC;AACAH,IAAAA,aAAa,CAACI,YAAD,CAAb;AACA,WAAOD,MAAP;AACH,GAJD,CATuC,CAcvC;;;AAduC,oBAebb,UAAU,CAACW,YAAD,EAAe,EAAf,CAfG;AAAA,MAehCL,KAfgC;AAAA,MAezBS,QAfyB;;AAAA,mBAgBbd,QAAQ,CAACG,UAAD,CAhBK;AAAA,MAgBhCY,KAhBgC;AAAA,MAgBzBC,QAhByB,kBAiBvC;;;AACAf,EAAAA,WAAW,CAAC,YAAM;AACde,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,GAFU,EAERA,KAAK,GAAG,CAAR,GAAY,IAAZ,GAAmB,IAFX,CAAX,CAlBuC,CAqBvC;;AACA,SAAO;AAAEA,IAAAA,KAAK,EAALA,KAAF;AAASV,IAAAA,KAAK,EAALA,KAAT;AAAgBS,IAAAA,QAAQ,EAARA,QAAhB;AAA0BN,IAAAA,UAAU,EAAVA;AAA1B,GAAP;AACH,CAvBD;;GAAMN,kB;UAkBFD,W;;;AAOJ,eAAeC,kBAAf","sourcesContent":["import { useReducer, useState } from 'react';\r\nimport useInterval from './useInterval';\r\n// custom hook to hold 4 react hook calls\r\nconst useEmailValidation = (maxSeconds) => {\r\n    // regex to validate email\r\n    const validateEmail = (email) => {\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(email);\r\n    };\r\n    // email valid useState hook\r\n    const [emailValid, setEmailValid] = useState(false);\r\n    // reducer to set state if email is valid or not\r\n    const emailReducer = (state, action) => {\r\n        const isValidEmail = validateEmail(action);\r\n        setEmailValid(isValidEmail);\r\n        return action;\r\n    };\r\n    // useReducer hook call\r\n    const [email, setEmail] = useReducer(emailReducer, '');\r\n    const [count, setCount] = useState(maxSeconds);\r\n    // custom setInterval method by react team to setCount\r\n    useInterval(() => {\r\n        setCount(count - 1);\r\n    }, count > 0 ? 1000 : null);\r\n    // return the values of the hook calls made inside this custom functional hook \r\n    return { count, email, setEmail, emailValid };\r\n}\r\n\r\nexport default useEmailValidation;"]},"metadata":{},"sourceType":"module"}