{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\GIDEON\\\\Desktop\\\\Web Projects\\\\React\\\\conference\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\nvar InputElement = function InputElement() {\n  _s();\n\n  // useState tracks a single JS object or value\n  // js destructuring syntax is used to name the two properties returned by useState -> readonly variable and function that sets the variable  \n  var _useState = useState(\"\"),\n      inputText = _useState[0],\n      setInputText = _useState[1]; // create a new state value inialised with empty array to hold state history changes\n\n\n  var _useState2 = useState([]),\n      historyList = _useState2[0],\n      setHistoryList = _useState2[1]; // call function from inside the onChange event listener and parse the current value of input to it.\n\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }\n  }, __jsx(\"input\", {\n    onChange: function onChange(e) {\n      setInputText(e.target.value);\n      setHistoryList([].concat(_toConsumableArray(historyList), [e.target.value]));\n    },\n    placeholder: \"Enter some text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 41\n    }\n  }), inputText, __jsx(\"hr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, historyList.map(function (rec) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 24\n      }\n    }, rec);\n  })));\n};\n\n_s(InputElement, \"Bk0Id2fWlKN3EwjLkrmfJt96ZA4=\");\n\n_c = InputElement;\nexport default InputElement;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputElement\");","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/pages/index.js"],"names":["React","useState","InputElement","inputText","setInputText","historyList","setHistoryList","e","target","value","map","rec"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACvB;AACA;AAFuB,kBAGWD,QAAQ,CAAC,EAAD,CAHnB;AAAA,MAGhBE,SAHgB;AAAA,MAGLC,YAHK,iBAIvB;;;AAJuB,mBAKeH,QAAQ,CAAC,EAAD,CALvB;AAAA,MAKhBI,WALgB;AAAA,MAKHC,cALG,kBAMvB;;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AACR,IAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AACbH,MAAAA,YAAY,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ;AACAH,MAAAA,cAAc,8BAAKD,WAAL,IAAkBE,CAAC,CAACC,MAAF,CAASC,KAA3B,GAAd;AACH,KAJO;AAKR,IAAA,WAAW,EAAC,iBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,EAK6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAL7B,EAMFN,SANE,EAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPG,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,WAAW,CAACK,GAAZ,CAAgB,UAACC,GAAD,EAAS;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,GAAN,CAAP;AACH,GAFA,CADL,CARG,CAAP;AAeH,CAtBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nconst InputElement = () => {\r\n    // useState tracks a single JS object or value\r\n    // js destructuring syntax is used to name the two properties returned by useState -> readonly variable and function that sets the variable  \r\n    const [inputText, setInputText] = useState(\"\");\r\n    // create a new state value inialised with empty array to hold state history changes\r\n    const [historyList, setHistoryList] = useState([]);\r\n    // call function from inside the onChange event listener and parse the current value of input to it.\r\n    return <div><input\r\n        onChange={(e) => {\r\n            setInputText(e.target.value);\r\n            setHistoryList([...historyList, e.target.value]);\r\n        }}\r\n        placeholder=\"Enter some text\" /><br/>\r\n        {inputText}\r\n        <hr/><br/>\r\n        <ul>\r\n            {historyList.map((rec) => {\r\n                return <div>{rec}</div>\r\n            })}\r\n            \r\n        </ul>\r\n        </div>;\r\n};\r\n\r\nexport default InputElement;"]},"metadata":{},"sourceType":"module"}