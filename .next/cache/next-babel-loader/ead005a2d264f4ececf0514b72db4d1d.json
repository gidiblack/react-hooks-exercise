{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\GIDEON\\\\Desktop\\\\Web Projects\\\\React\\\\conference\\\\src\\\\Speakers.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useReducer, useCallback, useMemo } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../public/static/site.css\";\nimport { Header } from '../src/Header';\nimport { Menu } from '../src/Menu';\nimport SpeakerDetail from './SpeakerDetail';\nimport { configContext } from './App';\nimport useAxiosFetch from './useAxiosFetch';\n\nvar Speakers = function Speakers(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  // invoke Axios fetch function(custom hook)\n  var _useAxiosFetch = useAxiosFetch(\"http://localhost:4000/speakers\", []),\n      data = _useAxiosFetch.data,\n      isLoading = _useAxiosFetch.isLoading,\n      hasErrored = _useAxiosFetch.hasErrored,\n      errorMessage = _useAxiosFetch.errorMessage,\n      updateDataRecord = _useAxiosFetch.updateDataRecord; // useState calls for checkboxes and loading\n\n\n  var _useState = useState(true),\n      speakingSaturday = _useState[0],\n      setSpeakingSaturday = _useState[1];\n\n  var _useState2 = useState(true),\n      speakingSunday = _useState2[0],\n      setSpeakingSunday = _useState2[1]; // reducer function that takes 2 parameters - previous state and action - then returns a new state\n\n\n  function SpeakersReducer(state, action) {\n    // function to update favorite speaker button\n    function updateFavorite(favoriteValue) {\n      return state.map(function (item, index) {\n        if (item.id === action.sessionId) {\n          item.favorite = favoriteValue;\n          return item;\n        }\n\n        return item;\n      });\n    } // switch statement based on parsed in action type - if action type in \"case\" returns true, set action.data\n\n\n    switch (action.type) {\n      case \"setSpeakerList\":\n        {\n          return action.data;\n        }\n\n      case \"favorite\":\n        {\n          return updateFavorite(true);\n        }\n\n      case \"unfavorite\":\n        {\n          return updateFavorite(false);\n        }\n      //\n\n      default:\n        return state;\n    }\n  } // \"dispatch\" is just a name that can be anything just so a second parameter (method) can be parsed into useReducer hook\n  // const [speakerList, dispatch] = useReducer(SpeakersReducer, []);\n  // const [isLoading, setIsLoading] = useState(true);\n  // reference shared context with useContext hook\n\n\n  var context = useContext(configContext); // useEffect call that simulates calling an outside service with a 1s delay then filters and sorts data on completion\n  // useEffect(() => {\n  //   setIsLoading(true);\n  //   new Promise(function (resolve) {\n  //     setTimeout(function () {\n  //       resolve();\n  //     }, 1000);\n  //   }).then(() => {\n  //     setIsLoading(false);\n  //     const speakerListServerFilter = SpeakerData.filter(({ sat, sun }) => {\n  //       return (speakingSaturday && sat) || (speakingSunday && sun);\n  //     });\n  //     // call dispatch to set speaker list and data to be used by reducer above\n  //     dispatch({\n  //       type: \"setSpeakerList\",\n  //       data: speakerListServerFilter\n  //     });\n  //   });\n  //   return () => {\n  //     console.log('cleanup');\n  //   };\n  // }, []); // [speakingSunday, speakingSaturday]);\n\n  var handleChangeSaturday = function handleChangeSaturday() {\n    setSpeakingSaturday(!speakingSaturday);\n  }; // filter speaker list based on wether they're speaking sat or sun, then sort them by firstname\n  // wrap with useMemo to create a cache of the speaker data -- useMemo take in a function and an array -- the array is a dependency which means that if anything changes in the data the cache is dumped and run again\n\n\n  var newSpeakerList = useMemo(function () {\n    return data.filter(function (_ref2) {\n      var sat = _ref2.sat,\n          sun = _ref2.sun;\n      return speakingSaturday && sat || speakingSunday && sun;\n    }).sort(function (a, b) {\n      if (a.firstName < b.firstName) {\n        return -1;\n      }\n\n      if (a.firstName > b.firstName) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [speakingSaturday, speakingSunday, data]); // parse the filtered list constant into this conditional because useMemo can't be used with conditionals \n\n  var speakerListFiltered = isLoading ? [] : newSpeakerList;\n  if (hasErrored) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, errorMessage, \"&nsbp;\\\"Make sure you have launched 'npm run json-server'\\\"\");\n\n  var handleChangeSunday = function handleChangeSunday() {\n    setSpeakingSunday(!speakingSunday);\n  }; // call useCallback to memoize(cache) this function so that it doesn't rerender all components on every change\n\n\n  var heartFavoriteHandler = useCallback(function (e, favoriteValue) {\n    e.preventDefault();\n    var sessionId = parseInt(e.target.attributes['data-sessionid'].value); // call dispatch to set favorite value on reducer\n\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId: sessionId\n    });\n  }, []);\n  if (isLoading) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }), __jsx(Menu, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"btn-toolbar margintopbottom5 checkbox-bigger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, context.showSpeakerSpeakingDays === false ? null : __jsx(\"div\", {\n    className: \"hide\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSaturday,\n    checked: speakingSaturday,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }), \"Saturday Speakers\")), __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSunday,\n    checked: speakingSunday,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }), \"Sunday Speakers\"))), \";\"), __jsx(\"div\", {\n    className: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"card-deck\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, speakerListFiltered.map(function (_ref3) {\n    var id = _ref3.id,\n        firstName = _ref3.firstName,\n        lastName = _ref3.lastName,\n        bio = _ref3.bio,\n        favorite = _ref3.favorite;\n    return __jsx(SpeakerDetail, {\n      key: id,\n      id: id,\n      favorite: favorite,\n      onHeartFavoriteHandler: heartFavoriteHandler,\n      firstName: firstName,\n      lastName: lastName,\n      bio: bio,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 19\n      }\n    });\n  })))));\n};\n\n_s(Speakers, \"VkrMppf9lyejfhyKFLxinRHw4SM=\", false, function () {\n  return [useAxiosFetch];\n});\n\n_c = Speakers;\nexport default Speakers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Speakers\");","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/Speakers.js"],"names":["React","useEffect","useState","useContext","useReducer","useCallback","useMemo","Header","Menu","SpeakerDetail","configContext","useAxiosFetch","Speakers","data","isLoading","hasErrored","errorMessage","updateDataRecord","speakingSaturday","setSpeakingSaturday","speakingSunday","setSpeakingSunday","SpeakersReducer","state","action","updateFavorite","favoriteValue","map","item","index","id","sessionId","favorite","type","context","handleChangeSaturday","newSpeakerList","filter","sat","sun","sort","a","b","firstName","speakerListFiltered","handleChangeSunday","heartFavoriteHandler","e","preventDefault","parseInt","target","attributes","value","dispatch","showSpeakerSpeakingDays","lastName","bio"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useReducer, useCallback, useMemo } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../public/static/site.css\";\nimport { Header } from '../src/Header';\nimport { Menu } from '../src/Menu';\nimport SpeakerDetail from './SpeakerDetail';\nimport { configContext } from './App';\nimport useAxiosFetch from './useAxiosFetch'\n\nconst Speakers = ({}) => {\n  // invoke Axios fetch function(custom hook)\n  const {\n    data,\n    isLoading,\n    hasErrored,\n    errorMessage,\n    updateDataRecord\n  } = useAxiosFetch(\"http://localhost:4000/speakers\", []);\n\n  // useState calls for checkboxes and loading\n  const [speakingSaturday, setSpeakingSaturday] = useState(true);\n  const [speakingSunday, setSpeakingSunday] = useState(true);\n\n  // reducer function that takes 2 parameters - previous state and action - then returns a new state\n  function SpeakersReducer (state, action){\n    // function to update favorite speaker button\n    function updateFavorite(favoriteValue){\n      return state.map((item, index) => {\n        if (item.id === action.sessionId){\n          item.favorite = favoriteValue;\n          return item;\n        }\n        return item;\n      });\n    }\n\n    // switch statement based on parsed in action type - if action type in \"case\" returns true, set action.data\n    switch (action.type) {\n      case \"setSpeakerList\" : {\n        return action.data;\n      }\n      case \"favorite\" : {\n        return updateFavorite(true);\n      }\n      case \"unfavorite\" : {\n        return updateFavorite(false);\n      }\n      //\n      default:\n        return state;\n    }\n  }\n  // \"dispatch\" is just a name that can be anything just so a second parameter (method) can be parsed into useReducer hook\n  // const [speakerList, dispatch] = useReducer(SpeakersReducer, []);\n  // const [isLoading, setIsLoading] = useState(true);\n\n  // reference shared context with useContext hook\n  const context = useContext(configContext);\n\n  // useEffect call that simulates calling an outside service with a 1s delay then filters and sorts data on completion\n  // useEffect(() => {\n  //   setIsLoading(true);\n  //   new Promise(function (resolve) {\n  //     setTimeout(function () {\n  //       resolve();\n  //     }, 1000);\n  //   }).then(() => {\n  //     setIsLoading(false);\n  //     const speakerListServerFilter = SpeakerData.filter(({ sat, sun }) => {\n  //       return (speakingSaturday && sat) || (speakingSunday && sun);\n  //     });\n  //     // call dispatch to set speaker list and data to be used by reducer above\n  //     dispatch({\n  //       type: \"setSpeakerList\",\n  //       data: speakerListServerFilter\n  //     });\n  //   });\n  //   return () => {\n  //     console.log('cleanup');\n  //   };\n  // }, []); // [speakingSunday, speakingSaturday]);\n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n\n  // filter speaker list based on wether they're speaking sat or sun, then sort them by firstname\n  // wrap with useMemo to create a cache of the speaker data -- useMemo take in a function and an array -- the array is a dependency which means that if anything changes in the data the cache is dumped and run again\n  const newSpeakerList = useMemo(() => data\n  .filter(\n    ({ sat, sun }) =>\n      (speakingSaturday && sat) || (speakingSunday && sun),\n  )\n  .sort(function (a, b) {\n    if (a.firstName < b.firstName) {\n      return -1;\n    }\n    if (a.firstName > b.firstName) {\n      return 1;\n    }\n    return 0;\n  }), [speakingSaturday, speakingSunday, data]);\n\n  // parse the filtered list constant into this conditional because useMemo can't be used with conditionals \n  const speakerListFiltered = isLoading ? [] : newSpeakerList;\n\n  if(hasErrored)\n    return (\n      <div>\n        {errorMessage}&nsbp;\"Make sure you have launched 'npm run json-server'\"\n      </div>\n    );\n\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n\n  // call useCallback to memoize(cache) this function so that it doesn't rerender all components on every change\n  const heartFavoriteHandler = useCallback((e, favoriteValue) => {\n    e.preventDefault();\n    const sessionId = parseInt(e.target.attributes['data-sessionid'].value);\n    // call dispatch to set favorite value on reducer\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId\n    });\n\n  }, []);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <Header />\n      <Menu />\n      <div className=\"container\">\n        <div className=\"btn-toolbar margintopbottom5 checkbox-bigger\">\n          {/* check context of showSpeakerSpeakingDays before displaying the checkboxes */}\n          {context.showSpeakerSpeakingDays === false ? null : (\n            <div className=\"hide\">\n              <div className=\"form-check-inline\">\n                <label className=\"form-check-label\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    onChange={handleChangeSaturday}\n                    checked={speakingSaturday}\n                  />\n                  Saturday Speakers\n                </label>\n              </div>\n              <div className=\"form-check-inline\">\n                <label className=\"form-check-label\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-check-input\"\n                    onChange={handleChangeSunday}\n                    checked={speakingSunday}\n                  />\n                  Sunday Speakers\n                </label>\n              </div>\n            </div>\n          )};\n        </div>\n        <div className=\"row\">\n          <div className=\"card-deck\">\n            {speakerListFiltered.map(\n              ({ id, firstName, lastName, bio, favorite }) => {\n                return (\n                  <SpeakerDetail\n                    key={id}\n                    id={id}\n                    favorite={favorite}\n                    onHeartFavoriteHandler={heartFavoriteHandler}\n                    firstName={firstName}\n                    lastName={lastName}\n                    bio={bio}\n                  />\n                );\n              },\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Speakers;\n"]},"metadata":{},"sourceType":"module"}