{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\GIDEON\\\\Desktop\\\\Web Projects\\\\React\\\\conference\\\\src\\\\ImageToggleOnScroll.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageToggleOnScroll = function ImageToggleOnScroll(_ref) {\n  _s();\n\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1]; // scroll event listener using useEffect hook, that function returns another function to remove the listener before the component unmounts\n\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler); // call setInView to set the state of the component when it first mounts\n\n    setInView(isInView());\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }); // useState hook to track whether the current component is in full view of the browser window\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1]; //function that returns whether the component is showing in the scrollable area using getBoundingClientRect method\n\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  }; // function to set the inView state decleared earlier based on whether the current image/component is in view\n\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  }; // return secondaryImg component when it's state == inView and primaryImg component when it's state != inView\n\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  });\n};\n\n_s(ImageToggleOnScroll, \"RoSrlEFrOrZiqGEV14Z+EzZQ8IE=\");\n\n_c = ImageToggleOnScroll;\nexport default ImageToggleOnScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageToggleOnScroll\");","map":{"version":3,"sources":["C:/Users/GIDEON/Desktop/Web Projects/React/conference/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","imageRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAkC;AAAA;;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC1D,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AAD0D,kBAGxBE,QAAQ,CAAC,IAAD,CAHgB;AAAA,MAGnDK,SAHmD;AAAA,MAGxCC,YAHwC,iBAI1D;;;AACAP,EAAAA,SAAS,CAAE,YAAM;AACbQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC,EADa,CAEb;;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAQ,YAAM;AACVC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GARQ,CAAT,CAL0D,CAe1D;;AAf0D,mBAgB9BT,QAAQ,CAAC,KAAD,CAhBsB;AAAA,MAgBnDa,MAhBmD;AAAA,MAgB3CH,SAhB2C,kBAkB1D;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIP,QAAQ,CAACU,OAAb,EAAsB;AAClB,UAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA9C;AACH;;AACD,WAAO,KAAP;AACH,GAND,CAnB0D,CA2B1D;;;AACA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,IAAAA,SAAS,CAAC,YAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD,CA5B0D,CAiC1D;;;AACA,SACI;AACI,IAAA,GAAG,EAAEE,MAAM,GAAGV,YAAH,GAAkBD,UADjC;AAC6C,IAAA,GAAG,EAAC,EADjD;AACoD,IAAA,GAAG,EAAEE,QADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAtCD;;GAAMH,mB;;KAAAA,mB;AAwCN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\r\n\r\nconst ImageToggleOnScroll = ({ primaryImg, secondaryImg }) => {\r\n    const imageRef = useRef(null);\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    // scroll event listener using useEffect hook, that function returns another function to remove the listener before the component unmounts\r\n    useEffect (() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        // call setInView to set the state of the component when it first mounts\r\n        setInView(isInView());\r\n        setIsLoading(false);\r\n        return (() => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        });\r\n    });\r\n\r\n    // useState hook to track whether the current component is in full view of the browser window\r\n    const [inView, setInView] = useState(false);\r\n\r\n    //function that returns whether the component is showing in the scrollable area using getBoundingClientRect method\r\n    const isInView = () => {\r\n        if (imageRef.current) {\r\n            const rect = imageRef.current.getBoundingClientRect();\r\n            return rect.top >= 0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    // function to set the inView state decleared earlier based on whether the current image/component is in view\r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n    // return secondaryImg component when it's state == inView and primaryImg component when it's state != inView\r\n    return (\r\n        <img \r\n            src={inView ? secondaryImg : primaryImg} alt=\"\" ref={imageRef} />\r\n    );\r\n};\r\n\r\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}